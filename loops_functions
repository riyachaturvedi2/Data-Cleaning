
## Data and Programming in Python: Coursework 

# Part 1: Introductory Python (to be done without defining functions or classes)

# Question 1.1: Using a for loop, write code that takes in any list of objects, then prints out:
# "The value at position __ is __" for every element in the loop, where the first blank is the
# index location and the second blank the object at that index location.

x = ["a",8,9,15,3,"car"]

for index, value in enumerate(x):
    print(f"The value at position {index} is {value} ")

# Question 1.2: A palindrome is a word or phrase that is the same both forwards and backwards. Write
# code that takes a variable of any string, then tests to see whether it qualifies as a palindrome.
# Make sure it counts the word "radar" and the phrase "A man, a plan, a canal, Panama!", while
# rejecting the word "Microsoft" and the phrase "This isn't a palindrome". Print the results of these
# four tests.

a = "radar"
b = "A man, a plan, a canal, Panama!"
c = "Microsoft"
d = "This isn't a Palindrome"

b_fixed = [b.lower() for b_fixed in b if b.isalpha()]

    
for j in a,b_fixed,c,d:
    if j == j[::-1]:
            print("Palindrome detected")
    else:
        print("No Palindrome detected")


# Question 1.3: The code below pauses to wait for user input, before assigning the user input to the
# variable. Beginning with the given code, check to see if the answer given is an available
# vegetable. If it is, print that the user can have the vegetable and end the bit of code.  If
# they input something unrecognized by our list, tell the user they made an invalid choice and make
# them pick again. Repeat until they pick a valid vegetable.
available_vegetables = ['carrot', 'kale', 'broccoli', 'pepper']
choice = input('Please pick a vegetable I have available: ')

while True:
    choice = input('Please pick a vegetable I have available: ')
    if choice == 'carrot':
        print('You can have the vegetable')
        break
    elif choice == 'kale':
        print('You can have the vegetable')
        break
    elif choice == 'broccoli':
        print('You can have the vegetable')
        break
    else:
        print('Invalid choice, pick again!')

    

# Question 1.4: Write a list comprehension that starts with any list of strings and returns a new
# list that contains each string in all lower-case letters, unless the modified string begins with
# the letter "a" or "b", in which case it should drop it from the result.

list_1 = ["APple", "MOUNTain", "TEST", "Harris MPP", "BaNal", "Coding"]

new_list = [x.lower() for x in list_1 if not x.startswith("A") and not x.startswith("B")]


# Question 1.5: Beginning with the two lists below, write a single dictionary comprehension that
# turns them into the following dictionary: {'IL':'Illinois', 'IN':'Indiana', 'MI':'Michigan', 'WI':'Wisconsin'}
short_names = ['IL', 'IN', 'MI', 'WI']
long_names  = ['Illinois', 'Indiana', 'Michigan', 'Wisconsin']

new_dictionary = {short_names[i]: long_names[i] for i in range(len(short_names))}


#############
# Part 2: Functions and classes (must be answered using functions\classes)

# Question 2.1: Write a function that takes two numbers as arguments, then
# sums them together. If the sum is greater than 10, return the string 
# "big", if it is equal to 10, return "just right", and if it is less than
# 10, return "small". Apply the function to each tuple of values in the 
# following list, with the end result being another list holding the strings 
# your function generates (e.g. ["big", "big", "small"]).

start_list = [(10, 0), (100, 6), (0, 0), (-15, -100), (5, 4)]

def f(a,b):
    x = a + b
    if x < 10:
      return"small"
    elif x == 10:
      return"just right"
    else:
        return"big" 

results_1 = [f(a, b) for (a, b) in start_list]


# Question 2.2: The following code is fully-functional, but uses a global
# variable and a local variable. Re-write it to work the same, but using one
# argument and no global variable.

a = 10
def my_func():
    b = 40
    return a + b
x = my_func()

def my_func():
    a = 10
    b = 40
    return a + b

y = my_func()

# Question 2.3: Write a function that can generate a random password from
# upper-case and lower-case letters, numbers, and special characters 
# (!@#$%^&*). It should have an argument for password length, and should 
# check to make sure the length is between 8 and 16, or else print a 
# warning to the user and exit. Your function should also have a keyword 
# argument named "special_chars" that defaults to True.  If the function 
# is called with the keyword argument set to False instead, then the 
# random values chosen should not include special characters. Create a 
# second similar keyword argument for numbers. Use one of the two 
# libraries below in your solution:

def random_pass(length, spec_chars = True, nums = True):
    if length < 8 or length > 16: 
        print("Warning! Password should be between 8-16 characters")
        return
    characters = 'abcdefghijklmnopqstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*' 
    if spec_chars == False:
        characters = characters.replace("!@#$%^&*", "") 
    if nums == False:
        characters = characters.replace("1234567890", "") 
    
    random_pass = ''.join(random.choice(list(characters), length))
    return random_pass

## example       
random_pass(length = 9, spec_chars= True, nums = False)
random_pass(length = 6)
  
# Question 2.4: Create a class named MovieDatabase that takes one argument
# when an instance is created which stores the name of the person creating
# the database (in this case, you) as an attribute. Then give it two methods:
#
# The first, named add_movie, that requires three arguments when called: 
# one for the name of a movie, one for the genera of the movie (e.g. comedy, 
# drama), and one for the rating you personally give the movie on a scale 
# from 0 (worst) to 5 (best). Store those the details of the movie in the 
# instance.
#
# The second, named what_to_watch, which randomly picks one movie in the
# instance of the database. Tell the user what to watch tonight,
# courtesy of the name of the name you put in as the creator, using a
# print statement that gives all of the info stored about that movie.
# Make sure it does not crash if called before any movies are in the
# database.
#
# Finally, create one instance of your new class, and add four movies to
# it. Call your what_to_watch method once at the end.

class MovieDatabase():
 def __init__ (self, creator):
     self.creator = creator
     self.movies = []
 def add_movie(self, movie_name, genre, rating):
     self.movies.append([movie_name, genre, rating])
 def what_to_watch(self):
     choose = random.choice(self. movies)
     print(f"Movie choice brought to you courtsey of {self.creator}")
     print(" Movie Name:" + str(choose[0]) + " , Genre: " + str(choose[1]) + " , Rating: " + str(choose[2]))
     
Movie_Reccos = MovieDatabase('Riya')
Movie_Reccos.add_movie('Black Swan', 'Thriller', 4.5)
Movie_Reccos.add_movie('Closer', 'Drama', 3.5) 
Movie_Reccos.add_movie('Royal Tenenbaums', 'Drama', 4.5) 
Movie_Reccos.add_movie('Mean Girls', 'Comedy', 4)  

Movie_Reccos.what_to_watch()
